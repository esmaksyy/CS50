sort1 uses: Bubble Sort

How do you know?: During my tests on datasets with random arrangements, I observed that the "Sort 2" code exhibits characteristics of merge sorting. The "Sort 1" code is a bubble sort because when tested on a dataset with the most orderly arrangement, it takes the shortest time to perform the sorting operation, which is proportional of 'n'. Hence, the comparison results between "Sort 1" and "Sort 3" (Sort 1: 0.526s, Sort 3: 0.857s) have shown this.

sort2 uses: Merge Sort

How do you know?: Merge search in Big O should be the fast. That's why when Ä± used random10000.txt file, sort1 sorted in 0.297 seconds, sort2 in 0.085 and sort3 in 0.191 seconds. So since the fastest file is sort2, the sort2 file should be the merge sort.

sort3 uses: Selection Sort

How do you know?: During my tests on datasets with random arrangements, I observed that the "Sort 2" code exhibits characteristics of merge sorting. The "Sort 3" code is a selection sort because when tested on a dataset with the most orderly arrangement, it takes the longest time to perform the sorting operation, which is proportional to the square of 'n'. Hence, the comparison results between "Sort 1" and "Sort 3" (Sort 1: 0.526s, Sort 3: 0.857s) have shown this.
